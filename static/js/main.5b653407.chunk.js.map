{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","search","selectedUserId","display","curentDisplay","loading","className","htmlFor","id","value","onChange","event","target","map","format","type","todo","classNames","completed","readOnly","checked","title","userId","onClick","request","endpoint","fetch","then","response","json","catch","alert","CurrentUser","useState","users","setUsers","useEffect","usersFromServer","user","find","selectedUser","name","email","phone","App","setSelectedUserId","setTodos","query","setQuery","setCurrentDisplay","todoDelay","setTodoDelay","todosFromServer","displayedTodos","filtredTodo","filter","toLowerCase","includes","filteredTodos","searchQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b653407.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { TodoProps } from '../../types/types';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC<TodoProps> = ({\n  todos,\n  selectUser,\n  search,\n  selectedUserId,\n  display,\n  curentDisplay,\n  loading,\n}) => {\n  const displayFormat = ['all', 'active', 'completed'];\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        {loading ? (\n          <p>\n            loading...\n          </p>\n        ) : (\n          <ul className=\"TodoList__list\">\n            <label htmlFor=\"select\">\n              <select\n                id=\"select\"\n                value={curentDisplay}\n                onChange={(event) => {\n                  display(event.target.value);\n                }}\n              >\n                {displayFormat.map(format => (\n                  <option\n                    key={format}\n                    value={format}\n                  >\n                    {format}\n                  </option>\n                ))}\n              </select>\n            </label>\n            <input\n              type=\"text\"\n              onChange={(event) => {\n                search(event.target.value);\n              }}\n            />\n            {todos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n\n                <p>{todo.title}</p>\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected': todo.userId === selectedUserId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User #\n                  {' '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n","const BASE_API_URL = 'https://mate.academy/students-api/';\n\nexport const request = (endpoint: string) => {\n  return fetch(`${BASE_API_URL}${endpoint}`)\n    .then(response => response.json())\n    .catch(() => alert('server is dead'));\n};\n","import React, { useEffect, useState } from 'react';\nimport { request } from '../../api';\nimport { CurrentUserProps, User } from '../../types/types';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC<CurrentUserProps> = ({ selectedUserId }) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    request('users')\n      .then(usersFromServer => {\n        setUsers(usersFromServer);\n      });\n  }, []);\n\n  const user = users.find(selectedUser => selectedUserId === selectedUser.id);\n\n  return user ? (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {user.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  ) : (\n    <p>\n      loading...\n    </p>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api';\nimport { Todo } from './types/types';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [curentDisplay, setCurrentDisplay] = useState('all');\n  const [todoDelay, setTodoDelay] = useState(true);\n\n  const displayUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  useEffect(() => {\n    request('todos')\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setTodoDelay(false);\n      });\n  }, []);\n\n  const display = (format: string) => {\n    setCurrentDisplay(format);\n  };\n\n  const search = (searchQuery: string) => {\n    setQuery(searchQuery);\n  };\n\n  const filteredTodos = (() => {\n    const filtredTodo = todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    switch (curentDisplay) {\n      case 'active':\n        return filtredTodo.filter(todo => !todo.completed);\n\n      case 'completed':\n        return filtredTodo.filter(todo => todo.completed);\n\n      default:\n        return filtredTodo;\n    }\n  });\n\n  const displayedTodos = filteredTodos();\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={displayedTodos}\n          selectUser={displayUser}\n          search={search}\n          selectedUserId={selectedUserId}\n          display={display}\n          curentDisplay={curentDisplay}\n          loading={todoDelay}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <>\n              <CurrentUser\n                selectedUserId={selectedUserId}\n              />\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => {\n                  setSelectedUserId(0);\n                }}\n              >\n                Clear\n              </button>\n            </>\n\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}